[{"C:\\Users\\alex7\\Desktop\\sort\\src\\index.js":"1","C:\\Users\\alex7\\Desktop\\sort\\src\\App.js":"2","C:\\Users\\alex7\\Desktop\\sort\\src\\reportWebVitals.js":"3","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\index.js":"4","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\reportWebVitals.js":"5","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\App.js":"6","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortVisualizer.js":"7","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\MergeSort.js":"8","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\InsertionSort.js":"9","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\QuickSort.js":"10"},{"size":500,"mtime":1607874855370,"results":"11","hashOfConfig":"12"},{"size":528,"mtime":1607874855370,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1607874855370,"results":"14","hashOfConfig":"12"},{"size":500,"mtime":1607874855370,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607874855370,"results":"17","hashOfConfig":"16"},{"size":616,"mtime":1610409668476,"results":"18","hashOfConfig":"16"},{"size":11715,"mtime":1610562586940,"results":"19","hashOfConfig":"16"},{"size":1959,"mtime":1610556700802,"results":"20","hashOfConfig":"16"},{"size":758,"mtime":1610469254076,"results":"21","hashOfConfig":"16"},{"size":1007,"mtime":1610556464917,"results":"22","hashOfConfig":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tp3fel",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1wvzlh2",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\Users\\alex7\\Desktop\\sort\\src\\index.js",[],"C:\\Users\\alex7\\Desktop\\sort\\src\\App.js",[],"C:\\Users\\alex7\\Desktop\\sort\\src\\reportWebVitals.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\index.js",[],["47","48"],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\reportWebVitals.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\App.js",["49"],"import logo from './logo.svg';\nimport './App.css';\nimport SortVisualizer from \"./SortVisualizer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <SortVisualizer/>\n      {/*\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>*/}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortVisualizer.js",["50","51"],"import React from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport getMergeSortAnimations from \"./SortAlgorithms/Javascript/MergeSort.js\";\r\nimport getInsertionSortAnimations from \"./SortAlgorithms/Javascript/InsertionSort.js\";\r\nimport getQuickSortAnimations from \"./SortAlgorithms/Javascript/QuickSort.js\";\r\nimport githubLink from \"./githubLink.png\";\r\n\r\nimport \"./SortVisualizer.css\";\r\n\r\n/**\r\nSort Visualizer Component that controls drawing data to canvas\r\nand animation controls of sorting algorithms\r\n**/\r\nclass SortVisualizer extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      width: 0, height: 0, maxtimeouts: 0,\r\n      type: {scatter: true, swirl: false},\r\n      min_el: 10,\r\n      max_el: 2048,\r\n      num_el: 512,\r\n      data: [], //integer array to be sorted, etc...\r\n      running: false,\r\n      algorithm: \"insertion\",\r\n      realTime: 0,\r\n      comparisons: 0,\r\n      swaps: 0,\r\n      mainWrites: 0,\r\n      auxWrites: 0,\r\n    };\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  /** When component Mounts set the canvas based on window dimensions.\r\n  Then initialize random data and plot it in default type: scatter plot**/\r\n  componentDidMount(){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    const w = window.innerWidth;\r\n    const h = window.innerHeight;\r\n    ctx.canvas.width = w;\r\n    ctx.canvas.height = h*0.95;\r\n\r\n    const rand_arr = [];\r\n    for(let i = 0; i < this.state.num_el; i++){\r\n      rand_arr.push(Math.random());\r\n    }\r\n    if(this.state.type.scatter === true) this.drawScatter(rand_arr, w, h);\r\n\r\n    else if (this.state.type.swirl === true) this.drawSwirl(rand_arr, w, h);\r\n    this.setState({data:rand_arr, width: w, height: h})\r\n  }\r\n\r\n  drawScatter(rand_arr, w, h, selected){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    var highlight = false;\r\n    ctx.clearRect(0, 0, w, h);\r\n    for(let i = 0; i < rand_arr.length; i++){\r\n      ctx.beginPath();\r\n      if(selected !== undefined && selected !== null){\r\n        for(let j = 0; j < selected.length; j++){\r\n          if(selected[j] === i) highlight = true;\r\n        }\r\n      }\r\n      ctx.fillStyle = \"rgb(255,255,255)\";\r\n      ctx.arc( ((i+1)/(this.state.num_el))*(w),\r\n                (h*0.95)-(rand_arr[i]*h+1),\r\n                1,\r\n                0,\r\n                Math.PI*2);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      // draw select box\r\n      if(highlight === true){\r\n        const x = ((i+1)/(this.state.num_el))*(w) -6;\r\n        const y = (h*0.95)-(rand_arr[i]*h+1) -6;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"rgb(255, 0, 0)\";\r\n        ctx.rect(x,y,12,12);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        highlight = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawSwirl(rand_arr, w ,h, selected){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    var highlight = false;\r\n    ctx.clearRect(0, 0, w, h);\r\n    const max_r = Math.min(w/2, h/2);\r\n    const center = {x:w/2,y:h/2};\r\n    for(let i = 0; i < rand_arr.length; i++){\r\n      ctx.beginPath();\r\n      if(selected !== undefined && selected !== null){\r\n        for(let j = 0; j < selected.length; j++){\r\n          if(selected[j] === i) highlight = true;\r\n        }\r\n      }\r\n      ctx.fillStyle = \"rgb(255,255,255)\";\r\n      const theta = (i/rand_arr.length)*Math.PI*2;\r\n      const r = rand_arr[i]*max_r;\r\n      const xPos = center.x + r*Math.cos(theta);\r\n      const yPos = center.y + r*Math.sin(theta)\r\n      ctx.arc(xPos,\r\n              yPos,\r\n              1,\r\n              0,\r\n              2*Math.PI);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      if(highlight === true){\r\n        const x = xPos-6;\r\n        const y = yPos-6;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"rgb(255, 0, 0)\";\r\n        ctx.rect(x,y,12,12);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        highlight = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  **/\r\n  resetData(){\r\n    const h = this.state.height;\r\n    const w = this.state.width;\r\n    //draw new random data in scatter plot\r\n\r\n    const rand_arr = [];\r\n    for(let i = 0; i < this.state.num_el; i++){\r\n      rand_arr.push(Math.random());\r\n    }\r\n    if(this.state.type.scatter === true) this.drawScatter(rand_arr, w, h);\r\n    else if(this.state.type.swirl === true) this.drawSwirl(rand_arr, w, h);\r\n    this.setState({data:rand_arr});\r\n    //draw new random data in swirl dot plot\r\n\r\n  }\r\n\r\n  changePlotType(e){\r\n    const w = this.state.width;\r\n    const h = this.state.height;\r\n\r\n    if(e.target.value === \"scatter\"){\r\n      this.setState({type:{scatter:true, swirl:false}});\r\n      this.drawScatter(this.state.data, w,h);\r\n    }\r\n    else if(e.target.value === \"swirl\"){\r\n      this.setState({type:{scatter:false, swirl:true}});\r\n      this.drawSwirl(this.state.data, w, h);\r\n    }\r\n  }\r\n\r\n  setAlgorithm(e){\r\n    this.setState({algorithm: e.target.value});\r\n  }\r\n\r\n  getAnimations(rand_arr){\r\n    const algo = this.state.algorithm;\r\n    if(algo === \"insertion\") return getInsertionSortAnimations(rand_arr);\r\n    if(algo === \"merge\") return getMergeSortAnimations(rand_arr);\r\n    if(algo === \"quick\") return getQuickSortAnimations(rand_arr);\r\n  }\r\n\r\n\r\n  startAnimate(){\r\n    const rand_arr = this.state.data;\r\n    const h = this.state.height;\r\n    const w = this.state.width;\r\n    const animations = this.getAnimations(rand_arr.slice());\r\n    console.log(\"animation length\", animations.length);\r\n    const that = this;\r\n    waitStartAnimate(that, rand_arr, w, h, animations, 0) // awaits setting state then starts animation\r\n    // this.setState({running:true});\r\n    //\r\n    // this.animate(rand_arr, w, h, animations, 0);\r\n  }\r\n\r\n  animate(rand_arr, w, h, animations, cur_index){\r\n    if(this.state.running !== false && animations[cur_index] !== undefined){\r\n      var selected = null;\r\n      if(animations[cur_index].swap !== null && animations[cur_index].swap !== undefined){\r\n        const [i,j] = animations[cur_index].swap;\r\n        const temp = rand_arr[i];\r\n        const temp2 = rand_arr[j];\r\n        rand_arr[i] = temp2;\r\n        rand_arr[j] = temp;\r\n\r\n      }\r\n      if(animations[cur_index].set !== null && animations[cur_index].set !== undefined){\r\n        rand_arr[animations[cur_index].set[0]] = animations[cur_index].set[1];\r\n      }\r\n      if(animations[cur_index].select !== null &&\r\n                  animations[cur_index].select !== undefined){\r\n                    selected = animations[cur_index].select;\r\n                  }\r\n      if(this.state.type.scatter === true) this.drawScatter(rand_arr, w, h, selected);\r\n      else if(this.state.type.swirl === true) this.drawSwirl(rand_arr, w, h, selected);\r\n      // continue animation when possible\r\n      if(cur_index < animations.length) requestAnimationFrame( () => {\r\n                                            this.animate(rand_arr, w, h, animations, cur_index+1)})\r\n      }\r\n      else{\r\n        this.setState({running:false});\r\n      }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.clearAnimations();\r\n  }\r\n\r\n  clearAnimations(){\r\n    var id = this.state.maxtimeouts;\r\n    while(id){\r\n      clearInterval(id);\r\n      id --;\r\n    }\r\n    this.setState({running:false})\r\n  }\r\n\r\n  updateElements(e){\r\n    e.preventDefault();\r\n    const new_num_el = parseInt(e.target.value);\r\n    const that = this;\r\n    waitUpdateElements(new_num_el, that)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className = \"sortContainer\">\r\n        <Draggable>\r\n          <div className = \"infoBox\">\r\n          <p> Data Elements\r\n            <input disabled = {this.state.running === true}\r\n            onChange = {(e) => this.updateElements(e)}\r\n              type = \"range\"\r\n              min = {this.state.min_el}\r\n              max = {this.state.max_el}\r\n              value = {this.state.num_el}>\r\n            </input> {this.state.num_el}\r\n            <button\r\n            onClick = {() => this.resetData()}\r\n            disabled = {this.state.running === true}>\r\n               Reset\r\n             </button>\r\n          </p>\r\n          <p> Visualization type:\r\n            <select onChange= {(e) => this.changePlotType(e)}>\r\n              <option value=\"scatter\"> Scatter Plot</option>\r\n              <option value=\"swirl\"> Swirl Dots</option>\r\n            </select>\r\n          </p>\r\n          <p>\r\n            Algorithm\r\n              <select disabled = {this.state.running === true}\r\n              onChange = {(e) => this.setAlgorithm(e)}>\r\n              <optgroup label = \"Insertion Family\">\r\n                <option value = \"insertion\"> Insertion Sort</option>\r\n                <option disabled = {true}> Binary Insertion Sort</option>\r\n              </optgroup>\r\n              <optgroup label = \"Merge Family\">\r\n                <option value = \"merge\"> Merge Sort </option>\r\n                <option disabled = {true}> In-Place Merge Sort</option>\r\n              </optgroup>\r\n              <optgroup label = \"Selection Family\">\r\n                <option disabled = {true}> Selection Sort </option>\r\n                <option disabled = {true}> Max-Heap Sort </option>\r\n              </optgroup>\r\n              <optgroup label = \"Exchange Family\">\r\n                <option value = \"quick\"> Quick Sort </option>\r\n                <option disabled = {true}> Dual Pivot Quick Sort</option>\r\n              </optgroup>\r\n              <optgroup label = \"Non-Comparison Family\">\r\n                <option disabled = {true}> Radix LSD Sort, Base 4</option>\r\n                <option disabled = {true}> Radix MSD Sort, Base 8</option>\r\n                <option disabled = {true}> In Place Radix LSD Sort, Base 16</option>\r\n              </optgroup>\r\n              <optgroup label = \"Hybrids\">\r\n                <option disabled = {true}> Binary Merge Sort </option>\r\n                <option disabled = {true}> TimSort </option>\r\n                <option disabled = {true}> IntroSort </option>\r\n              </optgroup>\r\n              </select>\r\n          </p>\r\n          <p> Language\r\n            <select disabled = {this.state.running === true}>\r\n            <option> Javascript</option>\r\n            <option> C++ </option>\r\n            </select>\r\n          </p>\r\n          <button\r\n          onClick = {() => this.startAnimate()}\r\n          disabled = {this.state.running === true}>\r\n          Sort!\r\n          </button>\r\n          </div>\r\n        </Draggable>\r\n        <canvas ref = {this.canvas} className = \"sortCanvas\"></canvas>\r\n        <a className = \"githubLink\"\r\n        href = \"https://github.com/alexandreLamarre/SortVisualizer\"\r\n        target = \"_blank\">\r\n          <img src ={githubLink}\r\n          className = \"githubLinkImg\">\r\n          </img>\r\n        </a>\r\n        <Draggable>\r\n          <div className = \"animationControls\" hidden = {this.state.running === false}>\r\n            <button> Start/Pause </button>\r\n            <button\r\n            onClick = {() => this.clearAnimations()}>\r\n              Stop\r\n            </button>\r\n            <div> Actual time to sort (and generate animations) <b> {this.state.realTime} ms</b> </div>\r\n            <div> <b>{this.state.comparisons}</b> Comparisons </div>\r\n            <div> <b>{this.state.swaps}</b> Swaps </div>\r\n            <div> <b>{this.state.mainWrites}</b> Writes to Main Array </div>\r\n            <div> <b>{this.state.auxWrites}</b> Writes to Auxiliary Array </div>\r\n          </div>\r\n        </Draggable>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SortVisualizer;\r\n\r\n/** ASYNCHRONOUS AND HELPER FUNCTIONS**/\r\n\r\nasync function waitUpdateElements(val, that){\r\n  await that.setState({num_el: val});\r\n  that.resetData();\r\n}\r\n\r\nasync function waitStartAnimate(that, rand_arr, w, h, animations){\r\n  await that.setState({running:true});\r\n  that.animate(rand_arr, w, h, animations, 0);\r\n}\r\n","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\MergeSort.js",[],["52","53"],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\InsertionSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\QuickSort.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":302,"column":9,"nodeType":"64","endLine":304,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":305,"column":11,"nodeType":"64","endLine":306,"endColumn":39},{"ruleId":"54","replacedBy":"67"},{"ruleId":"56","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["69"],["70"],"no-global-assign","no-unsafe-negation"]