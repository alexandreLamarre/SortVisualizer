[{"C:\\Users\\alex7\\Desktop\\sort\\src\\index.js":"1","C:\\Users\\alex7\\Desktop\\sort\\src\\App.js":"2","C:\\Users\\alex7\\Desktop\\sort\\src\\reportWebVitals.js":"3","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\index.js":"4","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\reportWebVitals.js":"5","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\App.js":"6","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortVisualizer.js":"7","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\MergeSort.js":"8","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\InsertionSort.js":"9","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\QuickSort.js":"10","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\DualQuickSort.js":"11","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\SelectionSort.js":"12","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\HeapSort.js":"13","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\TimSort.js":"14","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\CountingSort.js":"15","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\RadixSortLSD.js":"16","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\RadixSortMSD.js":"17"},{"size":500,"mtime":1607874855370,"results":"18","hashOfConfig":"19"},{"size":528,"mtime":1607874855370,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1607874855370,"results":"21","hashOfConfig":"19"},{"size":500,"mtime":1607874855370,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1607874855370,"results":"24","hashOfConfig":"23"},{"size":616,"mtime":1610409668476,"results":"25","hashOfConfig":"23"},{"size":17827,"mtime":1610643632778,"results":"26","hashOfConfig":"23"},{"size":1959,"mtime":1610556700802,"results":"27","hashOfConfig":"23"},{"size":758,"mtime":1610469254076,"results":"28","hashOfConfig":"23"},{"size":1005,"mtime":1610564571731,"results":"29","hashOfConfig":"23"},{"size":1325,"mtime":1610566543867,"results":"30","hashOfConfig":"23"},{"size":744,"mtime":1610577533837,"results":"31","hashOfConfig":"23"},{"size":1052,"mtime":1610650350782,"results":"32","hashOfConfig":"23"},{"size":1806,"mtime":1610583508552,"results":"33","hashOfConfig":"23"},{"size":835,"mtime":1610638809883,"results":"34","hashOfConfig":"23"},{"size":1350,"mtime":1610642847514,"results":"35","hashOfConfig":"23"},{"size":1527,"mtime":1610640712849,"results":"36","hashOfConfig":"23"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tp3fel",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1wvzlh2",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\alex7\\Desktop\\sort\\src\\index.js",[],"C:\\Users\\alex7\\Desktop\\sort\\src\\App.js",[],"C:\\Users\\alex7\\Desktop\\sort\\src\\reportWebVitals.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\index.js",[],["75","76"],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\reportWebVitals.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\App.js",["77"],"import logo from './logo.svg';\nimport './App.css';\nimport SortVisualizer from \"./SortVisualizer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <SortVisualizer/>\n      {/*\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>*/}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortVisualizer.js",["78","79","80","81"],"import React from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport getMergeSortAnimations from \"./SortAlgorithms/Javascript/MergeSort.js\";\r\nimport getInsertionSortAnimations from \"./SortAlgorithms/Javascript/InsertionSort.js\";\r\nimport getQuickSortAnimations from \"./SortAlgorithms/Javascript/QuickSort.js\";\r\nimport getDualQuickSortAnimations from \"./SortAlgorithms/Javascript/DualQuickSort.js\";\r\nimport getSelectionSortAnimations from \"./SortAlgorithms/Javascript/SelectionSort.js\";\r\nimport getMaxHeapSortAnimations from  \"./SortAlgorithms/Javascript/HeapSort.js\";\r\nimport getTimSortAnimations from \"./SortAlgorithms/Javascript/TimSort.js\";\r\nimport getCountingSortAnimations from \"./SortAlgorithms/Javascript/CountingSort.js\";\r\nimport getRadixSortLSDAnimations from \"./SortAlgorithms/Javascript/RadixSortLSD.js\";\r\nimport getRadixSortMSDAnimations from \"./SortAlgorithms/Javascript/RadixSortMSD\";\r\n\r\nimport githubLink from \"./githubLink.png\";\r\n\r\nimport \"./SortVisualizer.css\";\r\n\r\n/**\r\nSort Visualizer Component that controls drawing data to canvas\r\nand animation controls of sorting algorithms\r\n**/\r\nclass SortVisualizer extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      width: 0, height: 0, maxtimeouts: 0,\r\n      type: \"scatter\",\r\n      min_el: 10,\r\n      max_el: 2048,\r\n      num_el: 512,\r\n      data: [], //integer array to be sorted, etc...\r\n      sorted_data: [],\r\n      running: false,\r\n      algorithm: \"insertion\",\r\n      realTime: 0,\r\n      comparisons: 0,\r\n      swaps: 0,\r\n      mainWrites: 0,\r\n      auxWrites: 0,\r\n    };\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  draw(rand_arr, w, h, selected, sorted_arr){\r\n    if(this.state.type === \"scatter\") this.drawScatter(rand_arr, w, h, selected);\r\n    if(this.state.type === \"swirl\") this.drawSwirl(rand_arr, w, h, selected);\r\n    if(this.state.type === \"disparity\") this.drawDisparity(rand_arr, w, h,\r\n                                                            selected, sorted_arr);\r\n  }\r\n\r\n  /** When component Mounts set the canvas based on window dimensions.\r\n  Then initialize random data and plot it in default type: scatter plot**/\r\n  componentDidMount(){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    const w = window.innerWidth;\r\n    const h = window.innerHeight;\r\n    ctx.canvas.width = w;\r\n    ctx.canvas.height = h*0.95;\r\n\r\n    const rand_arr = [];\r\n    for(let i = 0; i < this.state.num_el; i++){\r\n      rand_arr.push(parseInt(Math.random() * this.state.num_el));\r\n    }\r\n    let sorted_arr = rand_arr.slice().sort(ascendingSort);\r\n\r\n    this.draw(rand_arr, w, h, [], sorted_arr);\r\n    this.setState({data:rand_arr, width: w, height: h, sorted_data: sorted_arr});\r\n  }\r\n\r\n  drawScatter(rand_arr, w, h, selected){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    var highlight = false;\r\n    ctx.clearRect(0, 0, w, h);\r\n    for(let i = 0; i < rand_arr.length; i++){\r\n      ctx.beginPath();\r\n      if(selected !== undefined && selected !== null){\r\n        for(let j = 0; j < selected.length; j++){\r\n          if(selected[j] === i) highlight = true;\r\n        }\r\n      }\r\n      ctx.fillStyle = \"rgb(255,255,255)\";\r\n      ctx.arc( ((i+1)/(this.state.num_el))*(w),\r\n                (h*0.95)-((rand_arr[i]/(this.state.num_el))*(h*0.95)+1),\r\n                1,\r\n                0,\r\n                Math.PI*2);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      // draw select box\r\n      if(highlight === true){\r\n        const x = ((i+1)/(this.state.num_el))*(w) -6;\r\n        const y = (h*0.95)-((rand_arr[i]/(this.state.num_el))*h*0.95+1) -6;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"rgb(255, 0, 0)\";\r\n        ctx.rect(x,y,12,12);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        highlight = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawSwirl(rand_arr, w ,h, selected){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    var highlight = false;\r\n    ctx.clearRect(0, 0, w, h);\r\n    const max_r = Math.min(w/2, (h*0.95)/2);\r\n    const center = {x:w/2,y:h*0.95/2};\r\n    for(let i = 0; i < rand_arr.length; i++){\r\n      ctx.beginPath();\r\n      if(selected !== undefined && selected !== null){\r\n        for(let j = 0; j < selected.length; j++){\r\n          if(selected[j] === i) highlight = true;\r\n        }\r\n      }\r\n      ctx.fillStyle = \"rgb(255,255,255)\";\r\n      const theta = (i/rand_arr.length)*Math.PI*2;\r\n      const r = (rand_arr[i]/this.state.num_el)*max_r;\r\n      const xPos = center.x + r*Math.cos(theta);\r\n      const yPos = center.y + r*Math.sin(theta)\r\n      ctx.arc(xPos,\r\n              yPos,\r\n              1,\r\n              0,\r\n              2*Math.PI);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      if(highlight === true){\r\n        const x = xPos-6;\r\n        const y = yPos-6;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"rgb(255, 0, 0)\";\r\n        ctx.rect(x,y,12,12);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        highlight = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawDisparity(rand_arr, w, h, selected, sorted_data){\r\n    const ctx = this.canvas.current.getContext(\"2d\");\r\n    const lookUpTable = {};\r\n    var highlight = false;\r\n    ctx.clearRect(0, 0, w, h);\r\n    const max_r = Math.min(w/2, h*0.95/2);\r\n    const c = rand_arr.length;\r\n    const center = {x:w/2,y:h*0.95/2};\r\n    const num_el = rand_arr.length;\r\n    for(let i = 0; i < rand_arr.length; i++){\r\n      const new_color = assignColorGradient(rand_arr[i], this.state.num_el);\r\n      //closeness measures the distance from the center:\r\n      // a distance of 1 means the element is in the correct place in the\r\n      //sorted array\r\n      // a distance of 0 means it is the furthest possible from the correct place\r\n      //in the sorted array\r\n      const startIndex = lookUpTable[rand_arr[i]] === undefined? 0:\r\n                                                      lookUpTable[rand_arr[i]]+1;\r\n      const sorted_index = sorted_data.indexOf(rand_arr[i], startIndex);\r\n      lookUpTable[rand_arr[i]] = sorted_index;\r\n      const closeness = c - Math.abs(i-sorted_index);\r\n      ctx.beginPath();\r\n      if(selected !== undefined && selected !== null){\r\n        for(let j = 0; j < selected.length; j++){\r\n          if(selected[j] === i) highlight = true;\r\n        }\r\n      }\r\n      ctx.fillStyle = new_color;\r\n      const theta = (i/rand_arr.length)*Math.PI*2;\r\n      const r = (closeness/c)*max_r;\r\n      const xPos = center.x + r*Math.cos(theta);\r\n      const yPos = center.y + r*Math.sin(theta);\r\n      ctx.arc(xPos,\r\n              yPos,\r\n              1,\r\n              0,\r\n              2*Math.PI);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      if(highlight === true){\r\n        const x = xPos-6;\r\n        const y = yPos-6;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"rgb(255, 255, 255)\";\r\n        ctx.rect(x,y,12,12);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        highlight = false;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  **/\r\n  resetData(){\r\n    const h = this.state.height;\r\n    const w = this.state.width;\r\n    //draw new random data in scatter plot\r\n\r\n    const rand_arr = [];\r\n    for(let i = 0; i < this.state.num_el; i++){\r\n      rand_arr.push(parseInt(Math.random()*this.state.num_el));\r\n    }\r\n    const selected = []; //no elements initially selected\r\n\r\n    let sorted_arr = rand_arr.slice().sort(ascendingSort);\r\n    this.draw(rand_arr, w, h, selected, sorted_arr);\r\n    this.setState({data:rand_arr, sorted_data: sorted_arr});\r\n\r\n  }\r\n\r\n  changePlotType(e){\r\n    const w = this.state.width;\r\n    const h = this.state.height;\r\n\r\n    if(e.target.value === \"scatter\"){\r\n      this.setState({type: e.target.value});\r\n      this.drawScatter(this.state.data, w,h);\r\n    }\r\n    else if(e.target.value === \"swirl\"){\r\n      this.setState({type: e.target.value});\r\n      this.drawSwirl(this.state.data, w, h);\r\n    }\r\n    else if(e.target.value === \"disparity\"){\r\n      this.setState({type: e.target.value});\r\n      this.drawDisparity(this.state.data, w ,h, [], this.state.sorted_data);\r\n    }\r\n  }\r\n\r\n  setAlgorithm(e){\r\n    this.setState({algorithm: e.target.value});\r\n  }\r\n\r\n  getAnimations(rand_arr){\r\n    const algo = this.state.algorithm;\r\n    if(algo === \"insertion\") return getInsertionSortAnimations(rand_arr);\r\n    if(algo === \"merge\") return getMergeSortAnimations(rand_arr);\r\n    if(algo === \"quick\") return getQuickSortAnimations(rand_arr);\r\n    if(algo === \"dualquick\") return getDualQuickSortAnimations(rand_arr);\r\n    if(algo === \"selection\") return getSelectionSortAnimations(rand_arr);\r\n    if(algo === \"heap\") return getMaxHeapSortAnimations(rand_arr);\r\n    if(algo === \"tim\") return getTimSortAnimations(rand_arr);\r\n    if(algo === \"counting\") return getCountingSortAnimations(rand_arr);\r\n    if(algo === \"radixLSD\") return getRadixSortLSDAnimations(rand_arr);\r\n    if(algo === \"radixMSD\") return getRadixSortMSDAnimations(rand_arr);\r\n  }\r\n\r\n\r\n  startAnimate(){\r\n    const rand_arr = this.state.data;\r\n    const h = this.state.height;\r\n    const w = this.state.width;\r\n    var start = performance.now();\r\n    const animations = this.getAnimations(rand_arr.slice());\r\n    var end = performance.now();\r\n    var time = parseFloat(end - start);\r\n    console.log(\"animation length\", animations.length, \"time\", time);\r\n    const that = this;\r\n    waitStartAnimate(that, rand_arr, w, h, animations, time) // awaits setting state then starts animation\r\n  }\r\n\r\n  animate(rand_arr, w, h, animations, cur_index){\r\n    if(this.state.running !== false && animations[cur_index] !== undefined){\r\n      var selected = null;\r\n      if(animations[cur_index].swap !== null && animations[cur_index].swap !== undefined){\r\n        const [i,j] = animations[cur_index].swap;\r\n        const temp = rand_arr[i];\r\n        const temp2 = rand_arr[j];\r\n        rand_arr[i] = temp2;\r\n        rand_arr[j] = temp;\r\n\r\n      }\r\n      if(animations[cur_index].set !== null && animations[cur_index].set !== undefined){\r\n        rand_arr[animations[cur_index].set[0]] = animations[cur_index].set[1];\r\n      }\r\n      if(animations[cur_index].select !== null &&\r\n                  animations[cur_index].select !== undefined){\r\n                    selected = animations[cur_index].select;\r\n                  }\r\n      this.draw(rand_arr, w, h, selected, this.state.sorted_data);\r\n      // continue animation when possible\r\n      if(cur_index < animations.length) requestAnimationFrame( () => {\r\n                                            this.animate(rand_arr, w, h, animations, cur_index+1)})\r\n      }\r\n      else{\r\n        this.setState({running:false});\r\n      }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.clearAnimations();\r\n  }\r\n\r\n  clearAnimations(){\r\n    var id = this.state.maxtimeouts;\r\n    while(id){\r\n      clearInterval(id);\r\n      id --;\r\n    }\r\n    this.setState({running:false})\r\n  }\r\n\r\n  updateElements(e){\r\n    e.preventDefault();\r\n    const new_num_el = parseInt(e.target.value);\r\n    const that = this;\r\n    waitUpdateElements(new_num_el, that)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className = \"sortContainer\">\r\n        <Draggable>\r\n          <div className = \"infoBox\" hidden = {this.state.running === true}>\r\n          <p> Data Elements\r\n            <input disabled = {this.state.running === true}\r\n            onChange = {(e) => this.updateElements(e)}\r\n              type = \"range\"\r\n              min = {this.state.min_el}\r\n              max = {this.state.max_el}\r\n              value = {this.state.num_el}>\r\n            </input> {this.state.num_el}\r\n            <button\r\n            onClick = {() => this.resetData()}\r\n            disabled = {this.state.running === true}>\r\n               Reset\r\n             </button>\r\n          </p>\r\n          <p> Visualization type:\r\n            <select onChange= {(e) => this.changePlotType(e)}\r\n                    value = {this.state.type}>\r\n              <option value=\"scatter\"> Scatter Plot</option>\r\n              <option value=\"swirl\"> Swirl Dots</option>\r\n              <option value = \"disparity\"> Disparity Dots </option>\r\n            </select>\r\n          </p>\r\n          <p>\r\n            Algorithm\r\n              <select disabled = {this.state.running === true}\r\n              onChange = {(e) => this.setAlgorithm(e)}>\r\n              <optgroup label = \"Insertion Family\">\r\n                <option value = \"insertion\"> Insertion Sort</option>\r\n                <option disabled = {true}> Binary Insertion Sort</option>\r\n              </optgroup>\r\n              <optgroup label = \"Merge Family\">\r\n                <option value = \"merge\"> Merge Sort </option>\r\n              </optgroup>\r\n              <optgroup label = \"Selection Family\">\r\n                <option value = \"selection\"> Selection Sort </option>\r\n                <option disabled = {true}> Double Selection Sort </option>\r\n                <option value = \"heap\"> Max-Heap Sort </option>\r\n                <option disabled = {true}> Ternary Heap Sort </option>\r\n              </optgroup>\r\n              <optgroup label = \"Exchange Family\">\r\n                <option value = \"quick\"> Quick Sort </option>\r\n                <option value = \"dualquick\"> Dual Pivot Quick Sort</option>\r\n              </optgroup>\r\n              <optgroup label = \"Non-Comparison Family\">\r\n                <option value = \"counting\"> Counting Sort </option>\r\n                <option value = \"radixLSD\"> Radix LSD Sort, Base 4</option>\r\n                <option value = \"radixMSD\"> Radix MSD Sort, Base 8</option>\r\n                <option disabled = {true} hidden = {true}> In Place Radix LSD Sort, Base 16</option>\r\n              </optgroup>\r\n              <optgroup label = \"Hybrids\">\r\n                <option disabled = {true}> Binary Merge Sort </option>\r\n                <option value = \"tim\"> TimSort </option>\r\n                <option disabled = {true}> IntroSort </option>\r\n              </optgroup>\r\n              </select>\r\n          </p>\r\n          <p> Language\r\n            <select disabled = {this.state.running === true}>\r\n            <option> Javascript</option>\r\n            <option disabled = {true}> C++ </option>\r\n            </select>\r\n          </p>\r\n          <button\r\n          onClick = {() => this.startAnimate()}\r\n          disabled = {this.state.running === true}>\r\n          Sort!\r\n          </button>\r\n          </div>\r\n        </Draggable>\r\n        <Draggable>\r\n          <div className = \"animationControls\" hidden = {this.state.running === false}>\r\n            <button> -inf </button>\r\n            <button> -1 </button>\r\n            <button> Start/Pause </button>\r\n            <button\r\n            onClick = {() => this.clearAnimations()}>\r\n              Stop\r\n            </button>\r\n            <button> +1 </button>\r\n            <button> +inf </button>\r\n            <p> Visualization type:\r\n              <select onChange= {(e) => this.changePlotType(e)}\r\n                      value = {this.state.type}>\r\n                <option value= \"scatter\"> Scatter Plot</option>\r\n                <option value= \"swirl\"> Swirl Dots</option>\r\n                <option value =\"disparity\"> Disparity Dots </option>\r\n              </select>\r\n            </p>\r\n            <div> Real sorting time (with animations) <b> {this.state.realTime} ms</b> </div>\r\n            <div> <b>{this.state.comparisons}</b> Comparisons </div>\r\n            <div> <b>{this.state.swaps}</b> Swaps </div>\r\n            <div> <b>{this.state.mainWrites}</b> Writes to Main Array </div>\r\n            <div> <b>{this.state.auxWrites}</b> Writes to Auxiliary Array </div>\r\n          </div>\r\n        </Draggable>\r\n        <canvas ref = {this.canvas} className = \"sortCanvas\"></canvas>\r\n        <a className = \"githubLink\"\r\n        href = \"https://github.com/alexandreLamarre/SortVisualizer\"\r\n        target = \"_blank\">\r\n          <img src ={githubLink}\r\n          className = \"githubLinkImg\">\r\n          </img>\r\n        </a>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SortVisualizer;\r\n\r\n/** ASYNCHRONOUS AND HELPER FUNCTIONS**/\r\n\r\nasync function waitUpdateElements(val, that){\r\n  await that.setState({num_el: val});\r\n  that.resetData();\r\n}\r\n\r\nasync function waitStartAnimate(that, rand_arr, w, h, animations, time){\r\n  await that.setState({running:true,\r\n    mainWrites: 0, auxWrites: 0,\r\n    comparions: 0, realTime:time,\r\n    swaps: 0});\r\n  that.animate(rand_arr, w, h, animations, 0);\r\n}\r\n\r\nfunction quickSorted(arr, l, r){\r\n  if(l < r){\r\n    var pivot = partitioned(arr, l, r);\r\n\r\n    quickSorted(arr, l, pivot -1);\r\n    quickSorted(arr, pivot+1, r);\r\n  }\r\n}\r\n\r\n/**\r\n\r\n**/\r\nfunction partitioned(arr, l, r){\r\n  var pivot = arr[r];\r\n\r\n  let i = l - 1;\r\n  for(let j = l; j <= r-1; j++){\r\n    if(arr[j] < pivot){\r\n      i++;\r\n      //swap array[i] and array[j]\r\n      const temp = arr[j];\r\n      const temp2 = arr[i];\r\n      arr[j] = temp2;\r\n      arr[i] = temp;\r\n    }\r\n  }\r\n  //swap array[i+1] and arr[r]\r\n  const temp = arr[i+1];\r\n  const temp2 = arr[r];\r\n  arr[i+1] = temp2;\r\n  arr[r] = temp;\r\n  return (i + 1)\r\n}\r\n\r\n/**\r\nAssigns a input value in the continuous range 0 to 1, to\r\na continuous color gradient\r\n@param v the data value to be converted to color\r\n@param c the normalizing constant for value so it is in the range 0, 1\r\n**/\r\nfunction assignColorGradient(v, c){\r\n  const value = v/c\r\n  if(value <0.33){\r\n    const r = 255 - (value)*3*255;\r\n    const g = value*3*255;\r\n    const b = 0;\r\n    return \"rgb(\" + r.toString() + \",\" + g.toString() + \",\" + b.toString() + \")\";\r\n  }\r\n  else if(value < 0.67){\r\n    const r = 0;\r\n    const g = 255 - (value -0.33)*3*255;\r\n    const b = (value -0.33)*3*255;\r\n    return \"rgb(\" + r.toString() + \",\" + g.toString() + \",\" + b.toString() + \")\";\r\n  }\r\n  else{\r\n    const r = (value-0.67)*3*255;\r\n    const g = 0;\r\n    const b = 255 - (value - 0.67)*3*255;\r\n    return \"rgb(\" + r.toString() + \",\" + g.toString() + \",\" + b.toString() + \")\";\r\n  }\r\n}\r\n\r\nfunction ascendingSort(a,b){\r\n  return a-b;\r\n}\r\n","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\MergeSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\InsertionSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\QuickSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\DualQuickSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\SelectionSort.js",["82"],"/**\r\n\r\n**/\r\nexport default function getSelectionSortAnimations(rand_arr){\r\n  const animations = [];\r\n  const arr = rand_arr.slice();\r\n  selectionSortAnimate(arr, animations)\r\n  return animations;\r\n}\r\n\r\n/**\r\n@param arr array to sort\r\n@param animations array to push animations to\r\n**/\r\nfunction selectionSortAnimate(arr, animations){\r\n  for(let i = 0; i < arr.length-1; i ++){\r\n    var min = i;\r\n\r\n    for(let j = i+ 1; j< arr.length; j++){\r\n      if(arr[j] < arr[min]){\r\n        min = j;\r\n      }\r\n    }\r\n\r\n    if(min != i) swap(arr, min, i, animations);\r\n  }\r\n}\r\n\r\nfunction swap(arr, i, j, animations){\r\n  animations.push({swap: [i,j], select: [i,j]});\r\n  const temp = arr[i];\r\n  const temp2 = arr[j];\r\n  arr[i] = temp2;\r\n  arr[j] = temp;\r\n}\r\n","C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\HeapSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\TimSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\CountingSort.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\RadixSortLSD.js",[],"C:\\Users\\alex7\\Desktop\\SortVisualizer\\src\\SortAlgorithms\\Javascript\\RadixSortMSD.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":12},{"ruleId":"87","severity":1,"message":"91","line":149,"column":11,"nodeType":"89","messageId":"90","endLine":149,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":412,"column":9,"nodeType":"94","endLine":414,"endColumn":27},{"ruleId":"95","severity":1,"message":"96","line":415,"column":11,"nodeType":"94","endLine":416,"endColumn":39},{"ruleId":"87","severity":1,"message":"97","line":447,"column":5,"nodeType":"89","messageId":"90","endLine":447,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":25,"column":12,"nodeType":"100","messageId":"101","endLine":25,"endColumn":14},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'num_el' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'quickSorted' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]